---
title: "Lab 7: Parking Garage Case Study"
author: "Your Name"
jupyter: julia-1.10
date: 2024-03-08
categories: [Lab]

format: 
    html: default

    # YOU DO NOT NEED BOTH PDF AND DOCX.
    # COMMENT OR DELETE THE ONE YOU DON'T WANT TO USE.
    pdf:
        documentclass: article
        fontsize: 11pt
        geometry:
            - margin=1in  
        number-sections: true
        code-line-numbers: true
    #docx: 
    #    toc: true
    #    fig-format: png
    #    number-sections: true
    #`    code-line-numbers: true

date-format: "ddd., MMM. D"
references: references.bib
---


```{julia}
using Revise
using ParkingGarage
using Random
using Distributions
```

and also regular packages

```{julia}
using Plots
using Statistics
Plots.default(; margin=5Plots.mm)
```

```{julia}
#| code-fold: true
let
    sow = ParkingGarageSOW()
    years = 1:(sow.n_years)
    demand = [
        ParkingGarage.calculate_demand(year, sow.demand_growth_rate) for year in years
    ]
    plot(
        years,
        demand;
        ylabel="Demand [cars/day]",
        xlabel="Year",
        legend=false,
        title="Demand Growth Rate: $(sow.demand_growth_rate) Cars/Year",
        size=(800, 400),
        marker=:circle,
    )
end
```

```{julia}
let
    sow = ParkingGarageSOW(; demand_growth_rate=80.0, n_years=20, discount_rate=0.12)
    n_levels = 2:12
    policies = [StaticPolicy(i) for i in n_levels]
    profits = [simulate(sow, policy) for policy in policies]
    plot(
        n_levels,
        profits;
        ylabel="NPV Profits [Million USD]",
        xlabel="Number of levels",
        legend=false,
        title="$(sow.n_years) Year Horizon, $(sow.discount_rate) Discount, $(sow.demand_growth_rate) Demand Growth",
        size=(800, 400),
        marker=:circle,
        xticks=n_levels,
    )
    hline!([0])
end
```

Generate states of the world:

```{julia}

function Gen_Years()
    years = 20 
    return years 
end 

function Gen_Rates()
    Discount_rate = 0.05
    return Discount_rate
end 

function Gen_Growth() #Generate growth rate value 
    Demand_growth_rate = rand(Normal(80, 10))
    return Demand_growth_rate
end 
```

```{julia}

n_sow = 10

sows = [
    ParkingGarageSOW(; demand_growth_rate=Gen_Growth(), n_years=Gen_Years(), discount_rate=Gen_Rates())
    for _ in 1:n_sow
]

#println(sows)
```

Calculate NPV for each SOW for each policy:

```{julia}
n_levels = 2:12
policies = [StaticPolicy(i) for i in n_levels]
```

```{julia}

n_levels = 2:12
policies = [StaticPolicy(i) for i in n_levels]

profits = []
for policy in policies
    #println(sow)
    profits_list = [simulate(sow, policy) for sow in sows] 
    #println(profits_list)
    average_profit = mean(profits_list) #average profit for that policy given all SOWs
    push!(profits, average_profit)
end


```



```{julia}

let 
    n_sow = 10

    sows = [
    ParkingGarageSOW(; demand_growth_rate=Gen_Growth(), n_years=Gen_Years(), discount_rate=Gen_Rates())
    for _ in 1:n_sow
    ]

    n_levels = 2:12
    policies = [StaticPolicy(i) for i in n_levels]

    profits = []
    for policy in policies
        #println(sow)
        profits_list = [simulate(sow, policy) for sow in sows] 
        #println(profits_list)
        average_profit = mean(profits_list) #average profit for that policy given all SOWs
        push!(profits, average_profit)
    end

    plot(
        n_levels,
        profits;
        ylabel="Average NPV Profits [Million USD]",
        xlabel="Number of levels",
        legend=false,
        title="20 Year Horizon, 0.05 Discount, Varying Demand Growth, Average profits",
        size=(800, 400),
        marker=:circle,
        xticks=n_levels,
    )
    hline!([0])


end

```

```{julia}
plot(
        n_levels,
        profits;
        ylabel="Average NPV Profits [Million USD]",
        xlabel="Number of levels",
        legend=false,
        title="20 Year Horizon, 0.05 Discount, Varying Demand Growth, Average profits",
        size=(800, 400),
        marker=:circle,
        xticks=n_levels,
    )
    hline!([0])
```

Now lets look at NPV for adaptive policies:

```{Julia}




```